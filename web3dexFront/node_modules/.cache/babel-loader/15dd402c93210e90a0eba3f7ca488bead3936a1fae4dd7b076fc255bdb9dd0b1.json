{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bogdan\\\\Desktop\\\\Web3Dex\\\\dexStarter\\\\dex\\\\src\\\\components\\\\Tokens.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Chart from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tokens = () => {\n  _s();\n  const [chart, setChart] = useState(null);\n  useEffect(() => {\n    // Функция для получения данных о криптовалютах\n    const fetchCryptoData = async () => {\n      try {\n        const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=chainlink,polygon,uniswap,curve-dao-token,maker,shiba-inu&vs_currencies=usd\");\n        const data = await response.json();\n        const chartData = {\n          labels: [\"LINK\", \"MATIC\", \"UNI\", \"CRV\", \"MKR\", \"SHIB\"],\n          datasets: [{\n            label: \"Crypto Prices\",\n            data: [data.chainlink.usd, data.polygon.usd, data.uniswap.usd, data[\"curve-dao-token\"].usd, data.maker.usd, data[\"shiba-inu\"].usd],\n            backgroundColor: \"rgba(75, 192, 192, 0.6)\"\n          }]\n        };\n        const ctx = document.getElementById(\"cryptoChart\").getContext(\"2d\");\n        const newChart = new Chart(ctx, {\n          type: \"bar\",\n          data: chartData\n        });\n        setChart(newChart);\n      } catch (error) {\n        console.log(\"Error fetching crypto data:\", error);\n      }\n    };\n    fetchCryptoData();\n\n    // Очистка графика при размонтировании компонента\n    return () => {\n      if (chart) {\n        chart.destroy();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"cryptoChart\",\n    width: \"400\",\n    height: \"400\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(Tokens, \"emiLVeZDkQQszKK8qVrGGhsfzT4=\");\n_c = Tokens;\nexport default CryptoChart;\nvar _c;\n$RefreshReg$(_c, \"Tokens\");","map":{"version":3,"names":["React","useEffect","useState","Chart","Tokens","chart","setChart","fetchCryptoData","response","fetch","data","json","chartData","labels","datasets","label","chainlink","usd","polygon","uniswap","maker","backgroundColor","ctx","document","getElementById","getContext","newChart","type","error","console","log","destroy","CryptoChart"],"sources":["C:/Users/Bogdan/Desktop/Web3Dex/dexStarter/dex/src/components/Tokens.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nconst Tokens = () => {\r\n  const [chart, setChart] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Функция для получения данных о криптовалютах\r\n    const fetchCryptoData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.coingecko.com/api/v3/simple/price?ids=chainlink,polygon,uniswap,curve-dao-token,maker,shiba-inu&vs_currencies=usd\"\r\n        );\r\n        const data = await response.json();\r\n\r\n        const chartData = {\r\n          labels: [\"LINK\", \"MATIC\", \"UNI\", \"CRV\", \"MKR\", \"SHIB\"],\r\n          datasets: [\r\n            {\r\n              label: \"Crypto Prices\",\r\n              data: [\r\n                data.chainlink.usd,\r\n                data.polygon.usd,\r\n                data.uniswap.usd,\r\n                data[\"curve-dao-token\"].usd,\r\n                data.maker.usd,\r\n                data[\"shiba-inu\"].usd,\r\n              ],\r\n              backgroundColor: \"rgba(75, 192, 192, 0.6)\",\r\n            },\r\n          ],\r\n        };\r\n\r\n        const ctx = document.getElementById(\"cryptoChart\").getContext(\"2d\");\r\n        const newChart = new Chart(ctx, {\r\n          type: \"bar\",\r\n          data: chartData,\r\n        });\r\n\r\n        setChart(newChart);\r\n      } catch (error) {\r\n        console.log(\"Error fetching crypto data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchCryptoData();\r\n\r\n    // Очистка графика при размонтировании компонента\r\n    return () => {\r\n      if (chart) {\r\n        chart.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return <canvas id=\"cryptoChart\" width=\"400\" height=\"400\"></canvas>;\r\n};\r\n\r\nexport default CryptoChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,UAAU;AAAC;AAE7B,MAAMC,MAAM,GAAG,MAAM;EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,eAAe,GAAG,YAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+HAA+H,CAChI;QACD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAElC,MAAMC,SAAS,GAAG;UAChBC,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;UACtDC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,eAAe;YACtBL,IAAI,EAAE,CACJA,IAAI,CAACM,SAAS,CAACC,GAAG,EAClBP,IAAI,CAACQ,OAAO,CAACD,GAAG,EAChBP,IAAI,CAACS,OAAO,CAACF,GAAG,EAChBP,IAAI,CAAC,iBAAiB,CAAC,CAACO,GAAG,EAC3BP,IAAI,CAACU,KAAK,CAACH,GAAG,EACdP,IAAI,CAAC,WAAW,CAAC,CAACO,GAAG,CACtB;YACDI,eAAe,EAAE;UACnB,CAAC;QAEL,CAAC;QAED,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;QACnE,MAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACmB,GAAG,EAAE;UAC9BK,IAAI,EAAE,KAAK;UACXjB,IAAI,EAAEE;QACR,CAAC,CAAC;QAEFN,QAAQ,CAACoB,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,KAAK,CAAC;MACnD;IACF,CAAC;IAEDrB,eAAe,EAAE;;IAEjB;IACA,OAAO,MAAM;MACX,IAAIF,KAAK,EAAE;QACTA,KAAK,CAAC0B,OAAO,EAAE;MACjB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO;IAAQ,EAAE,EAAC,aAAa;IAAC,KAAK,EAAC,KAAK;IAAC,MAAM,EAAC;EAAK;IAAA;IAAA;IAAA;EAAA,QAAU;AACpE,CAAC;AAAC,GArDI3B,MAAM;AAAA,KAANA,MAAM;AAuDZ,eAAe4B,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}